<?xml version="1.0"?>
<launch>
  <arg name="pose_source"/>
  <arg name="twist_source"/>
  <arg name="input_pointcloud"/>
  <arg name="localization_pointcloud_container_name"/>
  <arg name="initial_pose"/>
  <arg name="use_autoware_pose_covariance_modifier" default="false"/>
  <arg name="gnss_enabled" default="false" description="gnss availability for initial position estimation"/>
  <arg name="system_run_mode" default="logging_simulation"/>

  <!-- parameter paths for ndt -->
  <arg name="ndt_scan_matcher/pointcloud_preprocessor/crop_box_filter_measurement_range_param_path"/>
  <arg name="ndt_scan_matcher/pointcloud_preprocessor/voxel_grid_downsample_filter_param_path"/>
  <arg name="ndt_scan_matcher/pointcloud_preprocessor/random_downsample_filter_param_path"/>
  <arg name="ndt_scan_matcher/ndt_scan_matcher_param_path"/>


  <!-- only when running with a real vehicle, the pose_initializer judges the stop. 실차에서는 차량이 완전히 정지되어 있을 때만 위치 초기화 가능 -->
  <let name="stop_check_enabled" if="$(eval &quot;'$(var system_run_mode)'=='online'&quot;)" value="true"/>
  <let name="stop_check_enabled" if="$(eval &quot;'$(var system_run_mode)'=='logging_simulation'&quot;)" value="false"/>

  <!-- split string with underscores -->
  <let name="available_args" value="[\'ndt\',\'yabloc\',\'eagleye\',\'artag\',\'lidar-marker\']"/>
  <let name="split_function" value="list(set('$(var pose_source)'.split('_')).intersection($(var available_args)))"/>
  <let name="pose_sources" value="$(eval $(var split_function))"/>
  <let name="multi_localizer_mode" value="$(eval &quot;len($(var pose_sources))> 1&quot;)"/>

  <!-- organizes flags for which nodes to activate -->
  <let name="use_ndt_pose" value="$(eval &quot;'ndt' in $(var pose_sources)&quot;)"/>
  <let name="use_yabloc_pose" value="$(eval &quot;'yabloc' in $(var pose_sources)&quot;)"/>
  <let name="use_eagleye_pose" value="$(eval &quot;'eagleye' in $(var pose_sources)&quot;)"/>
  <let name="use_eagleye_twist" value="$(eval &quot;'eagleye' == '$(var twist_source)'&quot;)"/>
  <let name="use_gyro_odom_twist" value="$(eval &quot;'gyro_odom' == '$(var twist_source)'&quot;)"/>

  <!-- set initial pose -->
  <let name="user_defined_initial_pose/enable" value="$(eval &quot;len($(var initial_pose)) == 7&quot;)"/>
  <let name="user_defined_initial_pose/pose" value="$(var initial_pose)" if="$(var user_defined_initial_pose/enable)"/>
  <let name="user_defined_initial_pose/pose" value="[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]" unless="$(var user_defined_initial_pose/enable)"/>

  <!-- NDT Scan Matcher Launch (as pose estimator) -->
  <group if="$(var use_ndt_pose)">
    <push-ros-namespace namespace="pose_estimator"/>
    <let name="ndt_output_pose_with_cov_topic_name" if="$(eval &quot;'$(var use_autoware_pose_covariance_modifier)'=='true'&quot;)" value="/localization/pose_estimator/ndt_scan_matcher/pose_with_covariance"/>
    <let name="ndt_output_pose_with_cov_topic_name" unless="$(eval &quot;'$(var use_autoware_pose_covariance_modifier)'=='true'&quot;)" value="/localization/pose_estimator/pose_with_covariance"/>
    <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_estimator/ndt_scan_matcher.launch.xml">
      <arg name="output_pose_with_covariance_topic" value="$(var ndt_output_pose_with_cov_topic_name)"/>
    </include>

    <!-- Autoware Pose Covariance Modifier Node Launch -->
    <group if="$(var use_autoware_pose_covariance_modifier)">
      <include file="$(find-pkg-share autoware_pose_covariance_modifier)/launch/pose_covariance_modifier.launch.xml"/>
    </group>
  </group>

  <!-- YabLoc Launch (as pose estimator) -->
  <!-- <group if="$(var use_yabloc_pose)">
    <push-ros-namespace namespace="pose_estimator"/>
    <let name="yabloc_src_image" value="/sensing/camera/traffic_light/image_raw" unless="$(var multi_localizer_mode)"/>
    <let name="yabloc_src_image" value="/sensing/camera/traffic_light/image_raw/yabloc_relay" if="$(var multi_localizer_mode)"/>

    <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_estimator/yabloc.launch.xml">
      <arg name="src_image" value="$(var yabloc_src_image)"/>
    </include>
  </group> -->

  <!-- Gyro Odometer Launch (as twist estimator) -->
  <group if="$(var use_gyro_odom_twist)">
    <push-ros-namespace namespace="twist_estimator"/>
    <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_estimator/gyro_odometer.launch.xml"/>
  </group>

  <!-- Eagleye Launch -->
  <!-- <group if="$(eval &quot;$(var use_eagleye_pose) or $(var use_eagleye_twist)&quot;)">
    <let name="eagleye_name_space" value="pose_twist_estimator"/>
    <let name="eagleye_name_space" value="twist_estimator" unless="$(var use_eagleye_pose)"/>
    <let name="eagleye_name_space" value="pose_estimator" unless="$(var use_eagleye_twist)"/>
    <let name="output_pose_with_cov_name" value="/localization/pose_estimator/pose_with_covariance" unless="$(var multi_localizer_mode)"/>
    <let name="output_pose_with_cov_name" value="/localization/pose_estimator/eagleye/pose_with_covariance/to_relay" if="$(var multi_localizer_mode)"/>

    <push-ros-namespace namespace="$(var eagleye_name_space)"/>
    <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_estimator/eagleye/eagleye_rt.launch.xml">
      <arg name="output_twist_with_cov_name" value="/localization/twist_estimator/twist_with_covariance"/>
      <arg name="output_pose_with_cov_name" value="$(var output_pose_with_cov_name)"/>
      <arg name="use_eagleye_pose" value="$(var use_eagleye_pose)"/>
      <arg name="use_eagleye_twist" value="$(var use_eagleye_twist)"/>
    </include>
  </group> -->

  <!-- Pose Estimator Arbiter Launch -->
  <group if="$(var multi_localizer_mode)">
    <include file="$(find-pkg-share autoware_pose_estimator_arbiter)/launch/pose_estimator_arbiter.launch.xml">
      <arg name="pose_sources" value="$(var pose_sources)"/>
      <arg name="input_pointcloud" value="$(var input_pointcloud)"/>
    </include>
  </group>

  <!-- Util Launch -->
  <group>
    <push-ros-namespace namespace="util"/>

    <!-- pose_initializer -->
    <let name="sub_gnss_pose_cov" value="/sensing/gnss/pose_with_covariance"/> <!-- carla 토픽명과 일치 -->
    <!-- <group if="$(var use_eagleye_pose)" scoped="false">
      <let name="sub_gnss_pose_cov" value="/localization/pose_estimator/pose_with_covariance" unless="$(var multi_localizer_mode)"/>
    </group> -->
    <include file="$(find-pkg-share autoware_pose_initializer)/launch/pose_initializer.launch.xml">
      <arg name="user_defined_initial_pose/enable" value="$(var user_defined_initial_pose/enable)"/>
      <arg name="user_defined_initial_pose/pose" value="$(var user_defined_initial_pose/pose)"/>
      <arg name="ndt_enabled" value="$(var use_ndt_pose)"/>
      <arg name="yabloc_enabled" value="$(var use_yabloc_pose)"/>
      <arg name="gnss_enabled" value="$(var gnss_enabled)"/>
      <arg name="ekf_enabled" value="true"/>
      <arg name="stop_check_enabled" value="$(var stop_check_enabled)"/>
      <arg name="config_file" value="$(var pose_initializer_param_path)"/>
      <arg name="sub_gnss_pose_cov" value="$(var sub_gnss_pose_cov)"/>
    </include>

    <!-- automatic_pose_initializer -> system/default_ad_api_helpers/automatic_pose_initializer -->
    <group if="$(var gnss_enabled)">
      <include file="$(find-pkg-share automatic_pose_initializer)/launch/automatic_pose_initializer.launch.xml"/>
    </group>

    <!-- pointcloud_downsampling -->
    <let name="override_input_pointcloud" value="$(var input_pointcloud)"/>
    <let name="override_input_pointcloud" value="$(var input_pointcloud)/relay" if="$(var multi_localizer_mode)"/>
    <include file="$(find-pkg-share tier4_localization_launch)/launch/util/util.launch.xml" if="$(var use_ndt_pose)">
      <arg name="localization_pointcloud_container_name" value="$(var localization_pointcloud_container_name)"/>
      <arg name="input_pointcloud" value="$(var override_input_pointcloud)"/>
      <arg name="crop_box_filter_measurement_range_param_path" value="$(var ndt_scan_matcher/pointcloud_preprocessor/crop_box_filter_measurement_range_param_path)"/> 
      <arg name="voxel_grid_downsample_filter_param_path" value="$(var ndt_scan_matcher/pointcloud_preprocessor/voxel_grid_downsample_filter_param_path)"/> 
      <arg name="random_downsample_filter_param_path" value="$(var ndt_scan_matcher/pointcloud_preprocessor/random_downsample_filter_param_path)"/> 
    </include>
  </group>
</launch>